name: Ultimate AWS Cleanup for Medusa

on:
  workflow_dispatch:

jobs:
  destroy:
    runs-on: ubuntu-latest

    steps:
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-south-1

    - name: Brute Force Cleanup Medusa Resources
      run: |
        echo "ðŸ§¹ Cleaning up Medusa resources..."

        # Delete Load Balancer
        LB_ARN=$(aws elbv2 describe-load-balancers --query "LoadBalancers[?LoadBalancerName=='medusa-lb'].LoadBalancerArn" --output text || true)
        if [[ "$LB_ARN" != "None" && "$LB_ARN" != "" ]]; then
          TG_ARN=$(aws elbv2 describe-target-groups --query "TargetGroups[?LoadBalancerArns[0]=='$LB_ARN'].TargetGroupArn" --output text || true)
          if [[ "$TG_ARN" != "" ]]; then
            aws elbv2 delete-target-group --target-group-arn "$TG_ARN" || true
          fi
          aws elbv2 delete-load-balancer --load-balancer-arn "$LB_ARN" || true
        fi

        # Delete IAM Role
        if aws iam get-role --role-name ecsTaskExecutionRole > /dev/null 2>&1; then
          echo "Deleting IAM Role ecsTaskExecutionRole"
          ATTACHED_POLICIES=$(aws iam list-attached-role-policies --role-name ecsTaskExecutionRole --query 'AttachedPolicies[*].PolicyArn' --output text)
          for POLICY in $ATTACHED_POLICIES; do
            aws iam detach-role-policy --role-name ecsTaskExecutionRole --policy-arn $POLICY || true
          done
          aws iam delete-role --role-name ecsTaskExecutionRole || true
        fi

        # Delete CloudWatch Log Group
        aws logs delete-log-group --log-group-name /ecs/medusa || true

        # Delete DB Subnet Group
        aws rds delete-db-subnet-group --db-subnet-group-name medusa-db-subnet-group || true

        # Delete Internet Gateway(s)
        IGWS=$(aws ec2 describe-internet-gateways --query 'InternetGateways[].InternetGatewayId' --output text)
        for IGW in $IGWS; do
          ATTACHED_VPC=$(aws ec2 describe-internet-gateways --internet-gateway-ids $IGW --query 'InternetGateways[0].Attachments[0].VpcId' --output text)
          if [[ "$ATTACHED_VPC" != "None" ]]; then
            aws ec2 detach-internet-gateway --internet-gateway-id $IGW --vpc-id $ATTACHED_VPC || true
          fi
          aws ec2 delete-internet-gateway --internet-gateway-id $IGW || true
        done

        echo "âœ… Cleanup completed"
